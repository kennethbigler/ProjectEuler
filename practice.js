/*global console*/
/*jslint continue:true*/

/*  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
 *  Find the sum of all the multiples of 3 or 5 below 1000. - 233168 */
function multiples35() {
    "use strict";
    var end = 1000,
        i = 0,
        result = 0;
    for (i = 0; i < end; i += 1) {
        if ((i % 3) === 0 || (i % 5) === 0) {
            result += i;
        }
    }
    return result;
}

/*  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. - 4613732 */
function evenFib(a, b, sum) {
    "use strict";
    var end = 4000000,
        current = a + b,
        result = 0;
    console.log(current + ", " + sum);
    if (current > end) {
        return sum;
    } else if (current % 2 === 0) {
        result = evenFib(b, current, sum + current);
    } else {
        result = evenFib(b, current, sum);
    }
    return result;
}
function startEvenFib() {
    "use strict";
    var result = evenFib(1, 1, 0);
    return result;
}

/*  The prime factors of 13195 are 5, 7, 13 and 29.
 *  What is the largest prime factor of the number 600851475143 ? - 6857 */
function largestPrimeFactor(n) {
    "use strict";
    var factors = [],
        i = 0;
    while (n % 2 === 0) {
        if (factors.indexOf(2) === -1) {
            factors.push(2);
        }
        n = n / 2;
    }
    for (i = 3; i < Math.sqrt(n); i += 2) {
        while (n % i === 0) {
            if (factors.indexOf(i) === -1) {
                factors.push(i);
            }
            n = n / i;
        }
    }
    if (n > factors[factors.length - 1]) {
        return n;
    }
    return factors.pop;
}

/*  A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
 *  Find the largest palindrome made from the product of two 3-digit numbers. - 906609 */
function largestPalendrome() {
    "use strict";
    var i, j, k, product,
        end = 999,
        palendromes = [];
    
    // start at end and iterate down
    for (i = end; i > 0; i -= 1) {
        for (j = end; j > 0; j -= 1) {
            // check for palendrome
            product = (i * j).toString();
            for (k = 0; k < product.length / 2; k += 1) {
                if (product[k] !== product[product.length - k - 1]) {
                    break;
                }
            }
            if (k === (product.length / 2)) {
                palendromes.push(parseInt(product, 10));
            }
        }
    }
    product = 0;
    for (i = 0; i < palendromes.length; i += 1) {
        if (palendromes[i] > product) {
            product = palendromes[i];
        }
    }
    return product;
}

/*  2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 *  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20? - 232792560 */
function smallestDividingNumber() {
    "use strict";
    var i, n, end = 20;
    
    n = end;
    while (true) {
        for (i = end; i > end / 2; i -= 1) {
            if (n % i !== 0) {
                break;
            }
        }
        if (i === end / 2) {
            return n;
        }
        n += end;
    }
}

/*  The sum of the squares of the first ten natural numbers is,
 *      1^2 + 2^2 + ... + 10^2 = 385
 *  The square of the sum of the first ten natural numbers is,
 *      (1 + 2 + ... + 10)^2 = 55^2 = 3025
 *  Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
 *  Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum. - 25164150 */
function findSquaredSumDif() {
    "use strict";
    var i,
        sumSquared = 0,
        squaredSum = 0,
        end = 100;
    for (i = 1; i <= end; i += 1) {
        sumSquared += i;
        squaredSum += (i * i);
    }
    sumSquared *= sumSquared;
    return sumSquared - squaredSum;
}

/*  By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
 *  What is the 10 001st prime number? - 104743 */
function isPrime(n) {
    "use strict";
    var i;
    for (i = 2; i <= Math.sqrt(n); i += 1) {
        if (n % i === 0) {
            return false;
        }
    }
    return true;
}

function findXPrimeNumber() {
    "use strict";
    var n = 2,
        end = 10001,
        counter = 0;
    while (true) {
        if (isPrime(n)) {
            counter += 1;
        }
        if (counter === end) {
            return n;
        }
        n += 1;
    }
}

/*  The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.



 *  Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product? - 31109847552 */
function maxAdjacentProduct() {
    "use strict";
    var i,
        flag = 0,
        result = 1,
        product = 1,
        end = 13,
        number = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
    
    // set up initial number
    for (i = 0; i < end; i += 1) {
        product *= parseInt(number[i], 10);
    }
    result = product;
    // iterate through looking for windows without 0s finding max
    for (i = 0; i < number.length - end; i += 1) {
        if (number[i + end] === "0") {
            flag = end;
        }
        if (number[i] === "0" && number[i + end] !== "0") {
            product *= parseInt(number[i + end], 10);
        } else if (number[i + end] === "0" && number[i] !== "0") {
            product /= parseInt(number[i], 10);
        } else if (number[i + end] !== "0" && number[i] !== "0") {
            product /= parseInt(number[i], 10);
            product *= parseInt(number[i + end], 10);
            if (product > result && flag <= 0) {
                result = product;
            }
        }
        flag -= 1;
    }
    return result;
}

/*  A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
 *      a^2 + b^2 = c^2
 *      For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
 *  There exists exactly one Pythagorean triplet for which a + b + c = 1000.
 *  Find the product abc. - 31875000 */
function findPTriplet(a, b) {
    "use strict";
    var i, j, c, e;
    c = Math.sqrt((a * a) + (b * b));
    e = a + b + c;
    console.log("a: " + a + ", b: " + b + ", c: " + c + ", e: " + e);
    if (e === 1000) {
        return a * b * c;
    }
    for (i = a + 1; i < 400; i += 1) {
        for (j = 2; j < 401; j += 1) {
            if (Math.sqrt((i * i) + (j * j)) % 1 === 0) {
                return findPTriplet(i, j);
            }
        }
    }
}

function startFindPTriplet() {
    "use strict";
    return findPTriplet(0, 1);
}

/*  The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
 *  Find the sum of all the primes below two million. - 142913828922 */
function findXPrimeNumber() {
    "use strict";
    var n = 2,
        end = 2000000,
        sum = 0;
    while (n < end) {
        if (isPrime(n)) {
            sum += n;
        }
        n += 1;
    }
    return sum;
}

/*  In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

                08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
                49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
                81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
                52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
                22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
                24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
                32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
                67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
                24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
                21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
                78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
                16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
                86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
                19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
                04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
                88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
                04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
                20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
                20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
                01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

 *  The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
 *  What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid? - 70600674 */
function findGridMaxProduct() {
    "use strict";
    var i, j, k, max,
        grid = [[8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],
                [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],
                [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],
                [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],
                [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],
                [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],
                [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],
                [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],
                [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],
                [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],
                [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],
                [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],
                [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],
                [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],
                [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],
                [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],
                [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],
                [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],
                [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],
                [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]
            ],
        lrProduct = 1, udProduct = 1, lrudProduct = 1, lrduProduct = 1, end = 4, result = 0;

    // go through y
    for (i = 0; i < grid.length; i += 1) {
        // go through x
        for (j = 0; j < grid[i].length; j += 1) {
            // go through length (4)
            lrProduct = udProduct = lrudProduct = lrduProduct = 1;
            for (k = 0; k < end; k += 1) {
                // left and right
                if (j < grid[i].length - end) {
                    lrProduct *= grid[i][j + k];
                }
                // up and down
                if (i < grid.length - end) {
                    udProduct *= grid[i + k][j];
                }
                // left -> right, up -> down
                if ((j < grid[i].length - end) && (i < grid.length - end)) {
                    lrudProduct *= grid[i + k][j + k];
                }
                // left -> right, down -> up
                if ((j < grid[i].length - end) && (i >= end - 1)) {
                    lrduProduct *= grid[i - k][j + k];
                }
            }
            console.log("lr: " + lrProduct + ", ud: " + udProduct + ", lrud: " + lrudProduct + ", lrdu: " + lrduProduct);
            k = (lrProduct > udProduct) ? lrProduct : udProduct;
            max = (lrudProduct > lrduProduct) ? lrudProduct : lrduProduct;
            max = (max > k) ? max : k;
            result = (result > max) ? result : max;
        }
    }
    return result;
}

/*  The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *      1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *  Let us list the factors of the first seven triangle numbers:
 *       1: 1
 *       3: 1,3
 *       6: 1,2,3,6
 *      10: 1,2,5,10
 *      15: 1,3,5,15
 *      21: 1,3,7,21
 *      28: 1,2,4,7,14,28
 *  We can see that 28 is the first triangle number to have over five divisors.
 *  What is the value of the first triangle number to have over five hundred divisors? - 76576500 */
function numDivisors(n) {
    "use strict";
    var i, result = 0;
    for (i = 1; i <= Math.sqrt(n); i += 1) {
        if (i === Math.sqrt(n)) {
            result += 1;
        } else if (n % i === 0) {
            result += 2;
        }
    }
    return result;
}
function findTriNumXDivisors() {
    "use strict";
    var i = 1,
        end = 500,
        divisors = 0,
        triangleNumber = 0;
    
    while (divisors <= end) {
        triangleNumber += i;
        divisors = numDivisors(triangleNumber);
        i += 1;
        //console.log(triangleNumber + ": " + divisors);
    }
    return triangleNumber;
}


















